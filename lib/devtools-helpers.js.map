{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 121f1b3c4993c823496a","webpack:///./src/devtools-helpers.js","webpack:///./src/panel-helpers.js","webpack:///./src/injected-helpers.js","webpack:///./src/emitter-window-bridge.js","webpack:///./src/tunnel-utils.js","webpack:///./src/content-helpers.js","webpack:///./src/background-helpers.js"],"names":[],"mappings":"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","file":"devtools-helpers.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 121f1b3c4993c823496a\n **/","'use strict';\n\nimport PanelHelpers from './panel-helpers';\nimport InjectedHelpers from './injected-helpers';\nimport ContentHelpers from './content-helpers';\nimport BackgroundHelpers from './background-helpers';\nimport TunnelUtils from './tunnel-utils';\nimport EmitterWindowBridge from './emitter-window-bridge'\n\nexport default {\n  PanelHelpers,\n  InjectedHelpers,\n  ContentHelpers,\n  BackgroundHelpers,\n  TunnelUtils,\n  EmitterWindowBridge\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/devtools-helpers.js\n **/","'use strict';\n\nexport default {\n  /**\n   * Connect to the bacground page,\n   * immediately initializing any scripts and listening for messages to forward\n   * @param emitter a node-sytle EventEmitter\n   */\n  connectToBackground(portName) {\n    return new Promise(function (resolve) {\n      // Create a connection to the background page\n      const port = chrome.runtime.connect({name: portName});\n\n      const listener = function (message) {\n        if (message.name === 'background:connect') {\n          port.onMessage.removeListener(listener);\n          resolve(port);\n        }\n      };\n\n      // tunnel from injected to emitter\n      port.onMessage.addListener(listener);\n    });\n  },\n\n  /**\n   * Inject the given content script.\n   * Requires the cooperation of background-helpers\n   * @param port\n   * @param contentScript\n   * @returns {Promise}\n   */\n  injectContent(port, contentScript) {\n    return new Promise(function (resolve) {\n      const listener = function (message) {\n        if (message.name === 'content:registered') {\n          port.onMessage.removeListener(listener);\n          resolve();\n        }\n      };\n\n      port.onMessage.addListener(listener);\n\n      port.postMessage({\n        name: 'register-content',\n        contentTabId: chrome.devtools.inspectedWindow.tabId,\n        file: contentScript\n      });\n    });\n  },\n\n  /**\n   * Tunnel events from the background page to the message emitter\n   * and from the message emitter to the background page\n   * Requires the cooperation of background-helpers, content-helpers, and injected-helpers\n   * @param port a chrome.runtime.Port\n   * @param emitter a node-style EventEmitter\n   * @return () -> void A function that disposes of the listeners\n   */\n  proxyEvents(port, emitter) {\n    const backgroundListener = function (message) {\n      if (message.name === 'tunnel:panel') {\n        emitter.emit(message.event, message.payload);\n      }\n    };\n\n    const panelListener = function (event, payload) {\n      port.postMessage({\n        name: 'tunnel:injected',\n        event,\n        payload\n      });\n    };\n\n    const toInjected = 'tunnel:injected';\n    emitter.on(toInjected, panelListener);\n    port.onMessage.addListener(backgroundListener);\n\n    return function () {\n      emitter.removeListener(toInjected, panelListener);\n      port.onMessage.removeListener(backgroundListener);\n    };\n  },\n\n  /**\n   * Inject the given script file into the inspected window\n   * @param scriptFile\n   */\n  injectScript(scriptFile) {\n    return new Promise(function (resolve, reject) {\n      // URL scheme \"chrome-extension\" is not supported by Chrome's fetch yet\n      const injectedXHR = new XMLHttpRequest();\n      injectedXHR.open('get', scriptFile, true);\n      injectedXHR.addEventListener('load', function (xhrResult) {\n        const injectedScript = xhrResult.target.response;\n        chrome.devtools.inspectedWindow.eval(injectedScript, function (result, isException) {\n          if (isException) {\n            reject(result);\n          } else {\n            resolve(result);\n          }\n        });\n      });\n      injectedXHR.send();\n    });\n  },\n\n  /**\n   * A convenience method to forward messages, inject a content page,\n   * and inject an inspected script\n   *\n   * Note that this does not provide the convenient ability to tear down listeners,\n   * as it assumes the event-listening will be running for the lifetime of the application\n   * @param portName\n   * @param emitter a node-sytle event emitter\n   * @param contentScript the location of the content script to inject\n   * @param inspectedScript the location of the script to inject into the inspected window\n   * @returns {Promise} resolves when all scripts are injected\n   */\n  initializePanel(portName, emitter, contentScript, inspectedScript) {\n    const background = this.connectToBackground(portName);\n    const content = background.then((port) => {\n      this.proxyEvents(port, emitter);\n      return this.injectContent(port, contentScript).then(function () {\n        return port;\n      });\n    });\n    const injected = this.injectScript(inspectedScript);\n    return Promise.all([content, injected]).then(function ([port]) {\n      return port;\n    });\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/panel-helpers.js\n **/","'use strict';\n\nimport EmitterWindowBridge from './emitter-window-bridge'\n\nexport default {\n  /**\n   * Tunnel events from the content script to the emitter\n   * and from the emitter to the content script\n   *\n   * @return a function that tears down the listeners\n   */\n  proxyEvents(emitter) {\n    return EmitterWindowBridge.proxyEvents(window, window, emitter, 'tunnel:panel', 'tunnel:injected');\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/injected-helpers.js\n **/","'use strict';\n\nimport TunnelUtils from './tunnel-utils.js';\n\nexport default {\n  /**\n   * Tunnel events to/from a window/iframe to/from the emitter.\n   * Only events of the given names will be tunneled\n   */\n  proxyEvents(sourceWindow, targetWindow, emitter, toWindowEvent, toEmitterEvent) {\n    const windowToEmitter = TunnelUtils.tunnelEvents(sourceWindow, toEmitterEvent, function (message) {\n      emitter.emit(message.event, message.payload);\n    });\n\n    // publish emitter events to the content script\n    const emitterToWindow = function (event, payload) {\n      targetWindow.postMessage({\n        name: toWindowEvent,\n        event,\n        payload\n      }, '*');\n    };\n\n    targetWindow.addEventListener('message', windowToEmitter);\n    emitter.on(toWindowEvent, emitterToWindow);\n\n    return function () {\n      targetWindow.removeEventListener('message', windowToEmitter);\n      emitter.removeListener(toWindowEvent, emitterToWindow);\n    };\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/emitter-window-bridge.js\n **/","'use strict';\n\nexport default {\n  /**\n   * Wraps the givent function, ensuring that it will only be called\n   * when the message has the given eventName and originates from the same window\n   */\n  tunnelEvents(sourceWindow, eventName, fn) {\n    return function (event) {\n      const message = event.data;\n      if (\n        event.source !== sourceWindow\n        || typeof message !== 'object'\n        || message == null\n        || message.name !== eventName\n      ) {\n        return;\n      }\n      fn(message);\n    };\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/tunnel-utils.js\n **/","'use strict';\n\nimport TunnelUtils from './tunnel-utils.js';\n\nexport default {\n  connectToBackground(portName) {\n    return new Promise(function (resolve) {\n      const port = chrome.runtime.connect({name: portName});\n      const listener = function (message) {\n        if (message.name === 'background:connect') {\n          port.postMessage({name: 'register'});\n          port.onMessage.removeListener(listener);\n          resolve(port);\n        }\n      };\n\n      port.onMessage.addListener(listener);\n    });\n  },\n\n  /**\n   * Tunnel events from the injected script to the panel, and vice-versa\n   * Tunneling happens by means of the background page\n   */\n  proxyEvents(port) {\n    // tunnel events from the injected script to the panel\n    const injectedToPanel = TunnelUtils.tunnelEvents(window, 'tunnel:panel', function (message) {\n      port.postMessage(message);\n    });\n\n    // tunnel events from the panel to the injected script\n    const panelToInjected = function (message) {\n      if (message.name === 'tunnel:injected') {\n        window.postMessage(message, '*');\n      }\n    };\n\n    window.addEventListener('message', injectedToPanel);\n    port.onMessage.addListener(panelToInjected);\n\n    return function () {\n      window.removeEventListener('message', injectedToPanel);\n      port.onMessage.removeListener(panelToInjected);\n    };\n  },\n\n  /**\n   * A convenience method to connect to the background page and proxy events.\n   * Does not provide a convenient way to unregister events,\n   * as it assumes the listeners will live for the length of the application\n   * @return the port\n   */\n  initializeContent(portName) {\n    return this.connectToBackground(portName).then((port) => {\n      this.proxyEvents(port);\n      return port;\n    });\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/content-helpers.js\n **/","'use strict';\n\nconst tabIdFromPort = function (port) {\n  return port.sender.tab.id;\n};\n\n/**\n * Helpers for working with the Devtools background page\n * inspired by https://developer.chrome.com/extensions/devtools#solutions\n */\nexport default {\n  /**\n   * Create a registry object that will maintain the status of a background page\n   */\n  newRegistry() {\n    return {\n      panelConnections: {},\n      contentConnections: {},\n      panelToContent: {},\n      contentToPanel: {}\n    };\n  },\n\n  /**\n   * Return a new listener function that responds to messages from the panel\n   * the message that the listener is called with determines the outcome:\n   *\n   * tunnel:injected -- forward the message to the appropriate content script\n   * register-content -- tells the background page to inject the given content script\n   */\n  newPanelListener(registry) {\n    return function (message, sendingPort) {\n      const panelId = tabIdFromPort(sendingPort);\n\n      if (message.name === 'register-content') {\n        registry.panelToContent[panelId] = message.contentTabId;\n        registry.contentToPanel[message.contentTabId] = panelId;\n        chrome.tabs.executeScript(message.contentTabId, {file: message.file});\n      } else if (message.name === 'tunnel:injected') {\n        const contentPort = registry.contentConnections[registry.panelToContent[panelId]];\n        contentPort.postMessage(message);\n      }\n    };\n  },\n\n  /**\n   * Return a new listener function that responds to messages from the content page\n   * the message that the listener is called with determines the outcome:\n   *\n   * tunnel:panel -- forward the message to the appropriate panel\n   * register -- inform the panel that the content script has been registered\n   */\n  newContentListener(registry) {\n    return function (message, sendingPort) {\n      const contentId = tabIdFromPort(sendingPort);\n      const panelPort = registry.panelConnections[registry.contentToPanel[contentId]];\n      if (message.name === 'register') {\n        panelPort.postMessage({name: 'content:registered'});\n      } else if (message.name === 'tunnel:panel') {\n        panelPort.postMessage(message);\n      }\n    };\n  },\n\n  /**\n   * Register a connection from a port, caching its connection,\n   * attacting a listener, and preparing for event teardown\n   */\n  registerConnection(port, connections, idCache, listener) {\n    const id = tabIdFromPort(port);\n    connections[id] = port;\n    port.onMessage.addListener(listener);\n\n    port.onDisconnect.addListener(function () {\n      port.onMessage.removeListener(listener);\n      delete connections[id];\n      delete idCache[id];\n    });\n\n    port.postMessage({name: 'background:connect'});\n  },\n\n  /**\n   * Handle a port connections based on port name\n   * accepts an object of type {[portName]: function (port) -> void}\n   *\n   * When a port connects, the handler registered with that port's name will be\n   * called with the port.\n   */\n  handleConnections(portMap) {\n    const listener = function (port) {\n      const handler = portMap[port.name];\n      if (handler) {\n        handler(port);\n      }\n    };\n\n    chrome.runtime.onConnect.addListener(listener);\n    return function () {\n      chrome.runtime.onConnect.removeListener(listener);\n    };\n  },\n\n  /**\n   * A convenience method to handle connections\n   * with the default handling of panel ports and content ports\n   * sending messages back and forth\n   *\n   * Does not return an easy way of tearing down,\n   * because it is meant to last for the lifetime of the background page.\n   *\n   * However, individual port connections will be properly torn down.\n   */\n  initializeBackground(panelPortName, contentPortName) {\n    const registry = this.newRegistry();\n    const panelListener = this.newPanelListener(registry);\n    const contentListener = this.newContentListener(registry);\n    const handlers = {\n      [panelPortName]: (port) => {\n        this.registerConnection(port, registry.panelConnections, registry.panelToContent, panelListener);\n      },\n      [contentPortName]: (port) => {\n        this.registerConnection(port, registry.contentConnections, registry.contentToPanel, contentListener);\n      }\n    };\n    this.handleConnections(handlers);\n    return registry;\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/background-helpers.js\n **/"],"sourceRoot":""}